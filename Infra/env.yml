AWSTemplateFormatVersion: '2010-09-09'
Description: Create an ECS Fargate Cluster with all the services
Parameters:
  SecurityGroupName:
    Type: String
    Default: demo-yslen-sg
    
  LoadBalancerName:
    Type: String
    Default: demo-yslen-lb
  
  GitBranch:
    Type: String
    Default: master
  
  DNSName:
    Type: String
    Default: demo.yslen.com

  ClusterName:
    Type: String
    Default: demo-yslen-ecs

  Tag:
    Type: String
    Default: demo-yslen

Resources:  
# Security Group
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupName: !Ref SecurityGroupName
        GroupDescription: Access to the Fargate containers
        VpcId: vpc-07ecc3702830c2e04
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
    
# ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Ref 'ClusterName'

  # IAM role which authorizes ECS to manage resources on your account on your behalf, 
  # such as updating your load balancer with the details of where your containers are, 
  # so that traffic can reach your containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'
  
  # Role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                # Rules to allow ECS Exec
                - 'ssmmessages:CreateControlChannel'
                - 'ssmmessages:CreateDataChannel'
                - 'ssmmessages:OpenControlChannel'
                - 'ssmmessages:OpenDataChannel'
              Resource: '*'
  
# Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${Tag}-log
      RetentionInDays: 1

# Task Definition 
  # Simple metadata description of what container to run and what resource requirements it has.  
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Tag}-task
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        !Ref ECSTaskExecutionRole
      Tags:
        - Key: "Environment"
          Value: !Ref Tag
      TaskRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions: 
        - Name: !Sub ${Tag}-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Tag}-container:${GitBranch}
          PortMappings:
            - ContainerPort: 3000
          StopTimeout: 2
          LinuxParameters:
            InitProcessEnabled: true
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub ${Tag}-log
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecstest
  
# LoadBalancer
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref LoadBalancerName
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '120'
      Subnets: 
        - subnet-0d93771c7987b6165
        - subnet-0ec2d0492699fe08d 
      SecurityGroups: [!Ref 'ContainerSecurityGroup']
      Tags:
        - Key: "Environment"
          Value: !Ref Tag

# LoadBalancer Listeners
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 3000
      Protocol: HTTP

# TargetGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - PublicLoadBalancer
    Properties:
      Name: !Sub ${Tag}-target-group
      TargetType: ip
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: vpc-07ecc3702830c2e04
      Tags:
        - Key: "Environment"
          Value: !Ref Tag
      TargetGroupAttributes: 
        - Key: "deregistration_delay.timeout_seconds"
          Value: 5

# Service
  # Allows you to run multiple copies of a type of task, and gather up their logs and metrics, 
  # as well as monitor the number of running tasks and replace any that have crashed  
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Sub ${Tag}-service
      Cluster: !Ref 'ClusterName'
      EnableExecuteCommand: true
      LaunchType: FARGATE
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: 
            - subnet-0d93771c7987b6165
            - subnet-0ec2d0492699fe08d
          SecurityGroups: [!GetAtt ContainerSecurityGroup.GroupId]
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
      - TargetGroupArn:
          Ref: TargetGroup
        ContainerPort: 3000
        ContainerName: !Sub ${Tag}-container
      Tags:
        - Key: "Environment"
          Value: !Ref Tag

# DNS Record
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z08190763LW98D7RE1YWI
      Name: !Ref 'DNSName'
      Type: A
      AliasTarget:
        DNSName: !GetAtt PublicLoadBalancer.DNSName
        HostedZoneId: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID